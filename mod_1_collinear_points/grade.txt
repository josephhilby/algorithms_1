See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

SpotBugs:     FAILED (5 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 12 warnings)

Correctness:  35/41 tests passed
Memory:       1/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 91.22%
[ Compilation: 5%, API: 5%, Style: 0%, Correctness: 60%, Timing: 10%, Memory: 20% ]


ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.6K Apr 27 21:46 BruteCollinearPoints.java
4.4K Apr 27 21:46 FastCollinearPoints.java
3.1K Apr 27 21:46 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac LineSegment.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D UP_UNUSED_PARAMETER UP: Static or private method BruteCollinearPoints.removeNulls(LineSegment[]) has unused parameters  At BruteCollinearPoints.java:[lines 70-75]
M V EI_EXPOSE_REP EI: Returns a reference to the mutable object stored in the instance variable 'lineSegments', which exposes the internal representation of the class 'BruteCollinearPoints'. Instead, create a defensive copy of the object referenced by 'lineSegments' and return the copy.  At BruteCollinearPoints.java:[line 117]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 52]
M D UP_UNUSED_PARAMETER UP: Static or private method FastCollinearPoints.removeNulls(LineSegment[]) has unused parameters  At FastCollinearPoints.java:[lines 50-55]
M V EI_EXPOSE_REP EI: Returns a reference to the mutable object stored in the instance variable 'lineSegments', which exposes the internal representation of the class 'FastCollinearPoints'. Instead, create a defensive copy of the object referenced by 'lineSegments' and return the copy.  At FastCollinearPoints.java:[line 105]
SpotBugs ends with 5 warnings.


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:52:5: Conditional logic can be removed. [SimplifyBooleanReturn]
[WARN] BruteCollinearPoints.java:59:63: Do not use the letter 'l' as a parameter variable name. It is hard to distinguish from the number '1'. [ParameterName]
[WARN] BruteCollinearPoints.java:78:3: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] BruteCollinearPoints.java:84:9: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BruteCollinearPoints.java:90:20: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
[WARN] FastCollinearPoints.java:58:3: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] FastCollinearPoints.java:61:9: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] FastCollinearPoints.java:72:11: The local variable 'M' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Point.java:14:8: Unused import statement for 'edu.princeton.cs.algs4.StdOut'. [UnusedImports]
[WARN] Point.java:17:8: Unused import statement for 'java.util.Arrays'. [UnusedImports]
[WARN] Point.java:117:27: '(' is preceded with whitespace. [MethodParamPad]
Checkstyle ends with 0 errors and 11 warning.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------
[WARN] Point.java:87:18: The numeric literal '-0.0' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    - failed after 7 operations involving BruteCollinearPoints
    - first and last call to segments() returned different arrays

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.numberOfSegments() -> 2
          collinear.segments()
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -> 2
          collinear.segments()

    - failed on trial 1 of 100

  * equidistant.txt
    - failed after 7 operations involving BruteCollinearPoints
    - first and last call to segments() returned different arrays

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.segments()
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          collinear.segments()

    - failed on trial 1 of 100

==> FAILED

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 16/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2000, 2000) -> (9000, 9000)
    - reference segment 0: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 1
    - 5 extra entries in student solution, including:
      '(6000, 6000) -> (9000, 9000)'


  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (2000, 22000) -> (4000, 30000)
    - reference segment 1: (1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 2
    - 1 extra entry in student solution:
      '(2000, 22000) -> (4000, 30000)'


  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (5120, 20992) -> (8128, 20992)
    - reference segment 0: (4096, 20992) -> (5120, 20992) -> (6144, 20992) -> (7168, 20992) -> (8128, 20992)

    - number of entries in student   solution: 9
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including:
      '(5120, 29184) -> (8192, 29184)'


  * filename = input50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (1000, 9000) -> (1000, 26000)
    - reference segment 5: (1000, 2000) -> (1000, 9000) -> (1000, 13000) -> (1000, 23000) -> (1000, 26000)

    - number of entries in student   solution: 9
    - number of entries in reference solution: 7
    - 2 extra entries in student solution, including:
      '(18000, 23000) -> (18000, 30000)'


  * filename = input80.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 20: (16000, 6000) -> (1000, 21000)
    - reference segment 2: (17000, 5000) -> (16000, 6000) -> (12000, 10000) -> (9000, 13000) -> (1000, 21000)

    - number of entries in student   solution: 41
    - number of entries in reference solution: 31
    - 10 extra entries in student solution, including:
      '(8000, 23000) -> (30000, 23000)'


  * filename = input300.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 5: (7300, 10450) -> (7300, 31650)
    - reference segment 5: (7300, 10050) -> (7300, 10450) -> (7300, 17000) -> (7300, 25700) -> (7300, 31650)

    - number of entries in student   solution: 7
    - number of entries in reference solution: 6
    - 1 extra entry in student solution:
      '(7300, 10450) -> (7300, 31650)'


  * filename = inarow.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (5000, 0) -> (30000, 0)
    - reference segment 1: (0, 0) -> (5000, 0) -> (10000, 0) -> (15000, 0) -> (20000, 0) -> (25000, 0) -> (30000, 0)

    - number of entries in student   solution: 15
    - number of entries in reference solution: 5
    - 10 extra entries in student solution, including:
      '(0, 15000) -> (0, 30000)'


==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 5: (10470, 316) -> (9837, 685)
    - reference segment 69: (10681, 193) -> (10470, 316) -> (10259, 439) -> (10048, 562) -> (9837, 685)

    - number of entries in student   solution: 645
    - number of entries in reference solution: 288
    - 357 extra entries in student solution, including:
      '(13180, 30413) -> (14764, 30467)'


  * filename = rs1423.txt
==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (0, 6) -> (0, 9)
    - reference segment 0: (0, 4) -> (0, 6) -> (0, 7) -> (0, 8) -> (0, 9)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 1
    - 1 extra entry in student solution:
      '(0, 6) -> (0, 9)'


    - failed on trial 41 of 500
     10
         0     9
         8     6
         4     5
         0     6
         6     0
         0     4
         3     0
         0     7
         2     9
         0     8

  * 50 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 8: (1, 1) -> (1, 9)
    - reference segment 30: (1, 0) -> (1, 1) -> (1, 2) -> (1, 4) -> (1, 5) -> (1, 9)

    - number of entries in student   solution: 73
    - number of entries in reference solution: 38
    - 35 extra entries in student solution, including:
      '(2, 9) -> (9, 9)'


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 9: (1, 0) -> (9, 0)
    - reference segment 59: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0)

    - number of entries in student   solution: 323
    - number of entries in reference solution: 136
    - 187 extra entries in student solution, including:
      '(6, 9) -> (9, 9)'


    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 6: (15, 0) -> (33, 0)
    - reference segment 91: (4, 0) -> (15, 0) -> (22, 0) -> (29, 0) -> (33, 0)

    - number of entries in student   solution: 361
    - number of entries in reference solution: 221
    - 140 extra entries in student solution, including:
      '(27, 49) -> (38, 49)'


    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
  * 5-by-5 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (1, 0) -> (4, 0)
    - reference segment 3: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0)

    - number of entries in student   solution: 28
    - number of entries in reference solution: 16
    - 12 extra entries in student solution, including:
      '(1, 4) -> (4, 4)'


  * 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 9: (1, 0) -> (9, 0)
    - reference segment 67: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0)

    - number of entries in student   solution: 394
    - number of entries in reference solution: 154
    - 240 extra entries in student solution, including:
      '(6, 9) -> (9, 9)'


  * 20-by-20 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 25: (1, 0) -> (19, 0)
    - reference segment 1203: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0) -> (15, 0) -> (16, 0) -> (17, 0) -> (18, 0) -> (19, 0)

    - number of entries in student   solution: 5646
    - number of entries in reference solution: 2446
    - 3200 extra entries in student solution, including:
      '(16, 19) -> (19, 19)'


  * 5-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (1, 0) -> (4, 0)
    - reference segment 2: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0)

    - number of entries in student   solution: 17
    - number of entries in reference solution: 13
    - 4 extra entries in student solution, including:
      '(1, 3) -> (4, 3)'


  * 6-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (1, 0) -> (5, 0)
    - reference segment 3: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 16
    - 8 extra entries in student solution, including:
      '(2, 3) -> (5, 3)'


  * 10-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 5: (1, 0) -> (9, 0)
    - reference segment 12: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0)

    - number of entries in student   solution: 62
    - number of entries in reference solution: 38
    - 24 extra entries in student solution, including:
      '(6, 3) -> (9, 3)'


  * 15-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 6: (1, 0) -> (14, 0)
    - reference segment 30: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0)

    - number of entries in student   solution: 123
    - number of entries in reference solution: 79
    - 44 extra entries in student solution, including:
      '(11, 3) -> (14, 3)'


  * 25-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 10: (1, 0) -> (24, 0)
    - reference segment 92: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0) -> (15, 0) -> (16, 0) -> (17, 0) -> (18, 0) -> (19, 0) -> (20, 0) -> (21, 0) -> (22, 0) -> (23, 0) -> (24, 0)

    - number of entries in student   solution: 297
    - number of entries in reference solution: 213
    - 84 extra entries in student solution, including:
      '(21, 3) -> (24, 3)'


==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    - failed after 10 operations involving FastCollinearPoints
    - first and last call to segments() returned different arrays
    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.segments()
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -> 2
          collinear.numberOfSegments() -> 2
          collinear.segments()
    - failed on trial 1 of 100

  * equidistant.txt
    - failed after 16 operations involving FastCollinearPoints
    - first and last call to segments() returned different arrays
    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.segments()
          collinear.segments()
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.segments()
    - failed on trial 1 of 100

==> FAILED

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 16/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        2366           0           2366                   61
=> passed    32   0.00       40890           0          40890                  152
=> passed    64   0.01      676978           0         676978                  369
=> passed   128   0.03    11009250           0       11009250                  875
=> passed   256   0.36   177555906           0      177555906                 1965
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        2374           0           2374                   72
=> passed    32   0.00       40906           0          40906                  175
=> passed    64   0.02      677010           0         677010                  409
=> passed   128   0.06    11009314           0       11009314                  967
=> passed   256   1.13   177556034           0      177556034                 2178
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        3906        7955          19816                  364
=> passed   128   0.00       16002       39434          94870                  878
=> passed   256   0.01       64770      187162         439094                 1979
=> passed   512   0.04      260610      870567        2001744                 4459
=> passed  1024   0.20     1045506     3966705        8978916                 9962
=> passed  2048   0.64     4188162    17830859       39849880                22013
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (39849880 / 8978916) = 2.15
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        3906        1953           7812                  368
=> passed   128   0.00       16002        8001          32004                  865
=> passed   256   0.00       64770       32385         129540                 1999
=> passed   512   0.00      260610      130305         521220                 4498
=> passed  1024   0.02     1045506      522753        2091012                 9976
=> passed  2048   0.04     4188162     2094081        8376324                22018
=> passed  4096   0.12    16764930     8382465       33529860                48136
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (33529860 / 8376324) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        3906        6976          17858                  364
=> passed   128   0.00       16002       26477          68956                  868
=> passed   256   0.00       64770       69828         204426                 1976
=> passed   512   0.01      260610      245904         752418                 4480
=> passed  1024   0.02     1045506      927950        2901406                10021
=> passed  2048   0.06     4188162     3607527       11403216                22003
=> passed  4096   0.21    16764930    14220882       45206694                48150
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (45206694 / 11403216) = 1.99
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        3906        7701          19308                  366
=> passed   128   0.00       16002       35866          87734                  874
=> passed   256   0.00       64770      127120         319010                 1984
=> passed   512   0.01      260610      385258        1031126                 4483
=> passed  1024   0.02     1045506     1438626        3922758                10006
=> passed  2048   0.07     4188162     5568217       15324596                22022
=> passed  4096   0.27    16764930    21899886       60564702                48152
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (60564702 / 15324596) = 1.98
=> passed

==> 8/8 tests passed

Total: 31/31 tests passed!


================================================================



